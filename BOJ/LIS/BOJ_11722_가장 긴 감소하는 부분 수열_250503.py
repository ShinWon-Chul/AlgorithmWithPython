# 수열의 부분 수열중 가장 긴 증가하는 부분 수열을 구하는 유형의 문제입니다.
# 먼저 상수 조건을 확인하겠습니다.
# N의 갯수는 1000 이므로 N^2까지 시도해 볼 수 있습니다.
# 해당 원소를 끝으로 하는 가장 긴 수열의 길이를 저장하는 배열을 선언해서 dp 접근법을 시도해 보겠습니다.

#먼저 입력을 받겠습니다.

N = int(input())
A = list(map(int, input().split()))

# 해당 원소를 끝으로 하는 가장긴 부분 수열의 갯수를 저장하는 dp 배열을 선언하겠습니다.
# 초기 값은 자기 자신을 마지막으로 하는 수열도 가장 긴 수열이므로 1로 모든 값을 채우겠습니다.

dp = [1]*N

#가장 긴 부분수열을 구하는 dp 루프를 작성하겠습니다.

for i in range(1, N):
	for j in range(i):
		# i번째 원소가 j번째 원소보다 크다면 dp수를 업데이트 하겠습니다.
		if A[i] < A[j]:
			dp[i] = max(dp[i], dp[j]+1)

# 각 원소를 끝으로 증가하는 부분수열의 길이중 최대값을 구하겠습니다.
print(max(dp))